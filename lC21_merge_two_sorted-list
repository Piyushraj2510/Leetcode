/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        // If one of the lists is empty, return the other
        if(list1 == NULL) return list2;
        if(list2 == NULL) return list1;

        // Create a dummy node to simplify edge cases
        // (so we don't need to handle head separately)
        ListNode* dummy = new ListNode(-1);

        // Tail will always point to the last node of the merged list
        ListNode* tail = dummy;

        // Traverse both lists until one becomes empty
        while(list1 && list2) {
            if(list1->val <= list2->val) {
                // Attach list1 node if itâ€™s smaller (or equal)
                tail->next = list1;
                list1 = list1->next;
            } else {
                // Otherwise attach list2 node
                tail->next = list2;
                list2 = list2->next;
            }
            // Move tail forward
            tail = tail->next;
        }

        // Attach the remaining nodes of the non-empty list
        if(list1) {
            tail->next = list1;
        }
        if(list2) {
            tail->next = list2;
        }

        // The merged list starts after the dummy node
        ListNode* head = dummy->next;

        // Disconnect dummy from the list (good practice before deletion)
        dummy->next = NULL;

        // Return the merged list head
        return head;
    }
};
